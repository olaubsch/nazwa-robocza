using NUnit.Framework;
using UnityEngine;
using UnityEngine.TestTools;
using TMPro;
using System.Collections;

public class DoorInteractionTests
{
    private GameObject doorObject;
    private TMP_Text interactText;
    private Animator doorAnimator;

    [SetUp]
    public void SetUp()
    {
        // Stworzenie GameObject dla drzwi
        doorObject = new GameObject("Door");
        doorAnimator = doorObject.AddComponent<Animator>();

        // Stworzenie GameObject dla tekstu interakcji i przypisanie komponentu TMP_Text
        GameObject textObject = new GameObject("InteractText");
        interactText = textObject.AddComponent<TextMeshProUGUI>();

        // Ustawienie domyślnych wartości
        interactText.text = ""; // Początkowo tekst jest pusty
    }

    [TearDown]
    public void TearDown()
    {
        // Zniszczenie obiektów po każdym teście
        Object.DestroyImmediate(doorObject);
        Object.DestroyImmediate(interactText.gameObject);
    }

    [UnityTest]
    public IEnumerator PlayerEntersInteractionRange_ShowsOpenMessage()
    {
        // Symulacja wejścia gracza w zasięg interakcji
        OnTriggerEnter(CreatePlayerCollider());

        // Oczekiwanie na koniec klatki, aby Unity mogło przetworzyć zmiany
        yield return null;

        // Sprawdzenie, czy wyświetlany komunikat jest poprawny
        Assert.AreEqual("Naciśnij E, aby otworzyć", interactText.text);
    }

    [UnityTest]
    public IEnumerator PlayerExitsInteractionRange_ClearsMessage()
    {
        // Symulacja wejścia i wyjścia gracza z zasięgu interakcji
        OnTriggerEnter(CreatePlayerCollider());
        yield return null;

        OnTriggerExit(CreatePlayerCollider());
        yield return null;

        // Sprawdzenie, czy komunikat został wyczyszczony
        Assert.AreEqual("", interactText.text);
    }

    [UnityTest]
public IEnumerator PlayerPressesE_TogglesDoorState()
{
    // Symulacja wejścia gracza w zasięg interakcji
    OnTriggerEnter(CreatePlayerCollider());
    yield return null;

    // Symulacja naciśnięcia przycisku E przez gracza
    yield return PressKey(KeyCode.E);
    yield return null; // Czekamy na koniec klatki

    // Sprawdzenie, czy drzwi zostały otwarte
    Assert.IsFalse(doorAnimator.GetBool("isOpen"));
    Assert.AreEqual("Naciśnij E, aby otworzyć", interactText.text);

    // Symulacja ponownego naciśnięcia przycisku E przez gracza
    yield return PressKey(KeyCode.E);
    yield return null; // Czekamy na koniec klatki

    // Sprawdzenie, czy drzwi zostały zamknięte
    Assert.IsFalse(doorAnimator.GetBool("isOpen"));
    Assert.AreEqual("Naciśnij E, aby otworzyć", interactText.text);
}


    private void OnTriggerEnter(Collider other)
    {
        if (other.CompareTag("Player")) // Symulacja wejścia gracza w zasięg
        {
            UpdateInteractMessage("Naciśnij E, aby otworzyć");
        }
    }

    private void OnTriggerExit(Collider other)
    {
        if (other.CompareTag("Player")) // Symulacja wyjścia gracza z zasięgu
        {
            ClearMessage();
        }
    }

    private void UpdateInteractMessage(string message)
    {
        interactText.text = message;
    }

    private void ClearMessage()
    {
        interactText.text = "";
    }

    private Collider CreatePlayerCollider()
    {
        GameObject player = new GameObject("Player");
        player.tag = "Player";
        return player.AddComponent<BoxCollider>();
    }

    private IEnumerator PressKey(KeyCode keyCode)
{
    // Symulacja naciśnięcia klawisza
    yield return null; // Dodajemy yield, aby czekać na koniec klatki
    Input.GetKeyDown(keyCode);
    yield return null; // Ponownie czekamy na koniec klatki
}

}
